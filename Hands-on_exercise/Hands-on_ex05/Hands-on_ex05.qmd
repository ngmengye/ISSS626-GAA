---
title: "Hands-on_ex05"
author: "Ng Meng Ye"
---

If development are evenly distributed geographically? No -\> is there sign of spatial clustering? Yes -\> where are these clusters?

```{r}

pacman::p_load(sf, spdep, tmap, tidyverse)

```

```{r}
hunan <- st_read(dsn = "C:/ngmengye/ISSS626-GAA/Hands-on_exercise/Hands-on_ex05/data/geospatial",
                 layer = "Hunan")
```

```{r}
hunan2012 <- read_csv("C:/ngmengye/ISSS626-GAA/Hands-on_exercise/Hands-on_ex04/data/aspatial/Hunan_2012.csv")
```

```{r}
hunan <- left_join(hunan,hunan2012) %>%
  select(1:4, 7, 15)
```

equal interval = equal range of values\
quantile = equal number of observations

```{r}
equal <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal interval classification")

quantile <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal quantile classification")

tmap_arrange(equal, 
             quantile, 
             asp=1, 
             ncol=2)
```

```{r}
wm_q <- poly2nb(hunan,
                queen=TRUE)
summary(wm_q)
```

s0: sum of all weights in the spatial weights matrix\
s1: sum of squared weights for each region's links. rows sums\
s2: sum of squared weights of all the elements in the weights matrix

```{r}
rswm_q <- nb2listw(wm_q, 
                   style="W", 
                   zero.policy = TRUE)
rswm_q
```

## Moran's I

```{r}
moran.test(hunan$GDPPC, 
           listw=rswm_q, 
           zero.policy = TRUE, 
           na.action=na.omit)
```

Null Hypothesis (H0): The GDPPC values are evenly distributed geographically, with no spatial autocorrelation (random pattern).\
Alternative Hypothesis (H1): The GDPPC values are not evenly distributed geographically, indicating positive spatial autocorrelation (clusters of similar values).

p-value \< 0.05, we reject null hypothesis (H0).

Standard deviate (Z value) = 4.7351, positive: clustered, observations tend to be similar

```{r}
set.seed(1234)
bperm= moran.mc(hunan$GDPPC, 
                listw=rswm_q, 
                nsim=999, 
                zero.policy = TRUE, 
                na.action=na.omit)
bperm
```

The Monte Carlo simulation you ran provides a way to assess the significance of the observed Moran's I value.

We reject the null hypothesis and conclude that there is significant positive spatial autocorrelation in the GDPPC values across the regions in the hunan dataset.

### Visualize Monte Carlo Moran's I

res = expected value under random spatial distribution, close to orginal expectation -0.011494253

The observed Moran's I statistic (0.300749970) being significantly different from the expected value under randomness (-0.01504572) indicates that there is spatial autocorrelation in your data.

Why Calculate This Mean? Calculating the mean of the simulated Moran's I values helps to understand the distribution of Moran's I under the null hypothesis of spatial randomness. It gives you an idea of what the Moran's I would typically be if there were no spatial autocorrelation present in the data.

```{r}
mean(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res, 
     freq=TRUE, 
     breaks=20, 
     xlab="Simulated Moran's I")
abline(v=0, 
       col="red") 
```

#### Question: What statistical observation can you draw from the output above?

The observed Moran's I value is much larger than the values expected under the null hypothesis (as seen in the histogram), provides a strong evidence that the data has significant positive spatial autocorrelation

#### Challenge: Instead of using Base Graph to plot the values, plot the values by using ggplot2 package

```{r}
library(ggplot2)

# Convert the simulated Moran's I values to a data frame
moran_res_df <- data.frame(simulated_moran = bperm$res[1:999])  # Use only the simulated values

# Create the histogram with ggplot
ggplot(moran_res_df, aes(x = simulated_moran)) +
  geom_histogram(bins = 20, fill = "lightblue", color = "black", alpha = 0.7) +  # Histogram with 20 bins
  geom_vline(xintercept = 0, color = "red", linetype = "dashed") +  # Add vertical line at 0
  labs(
    x = "Simulated Moran's I",
    y = "Frequency",
    title = "Histogram of Simulated Moran's I Values"
  ) +
  theme_minimal()  # Use a minimal theme for a clean look

```

### Geary's C test

like Moran's I, but it focuses more on detecting local differences or dissimilarities between neighbouring values on a map.

```{r}
geary.test(hunan$GDPPC, listw=rswm_q)
```

#### Question: What statistical conclusion can you draw from the output above?

Geary C statistic 0.69 less than 1 indicates positive spatial autocorrelation, meaning neighbouring regions tend to have similar GDPPC values. The p-value 0.0002 is less than significant level 0.05, we can reject the null hypothesis of no spatial autocorrelation

```{r}
set.seed(1234)
bperm=geary.mc(hunan$GDPPC, 
               listw=rswm_q, 
               nsim=999)
bperm
```

#### Question: What statistical conclusion can you draw from the output above?

The observed Geary's C value of 0.69072 indicates positive spatial autocorrelation (neighboring regions tend to have similar GDPPC values).

```{r}
mean(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res, freq=TRUE, breaks=20, xlab="Simulated Geary c")
abline(v=1, col="red") 
```

#### Question: What statistical observation can you draw from the output?

The distribution centers around 1, which is expected because Geary's C equals 1 when there is no spatial autocorrelation (randomness). The histogram shows that the observed Geary’s C statistic (around 0.69) is much lower than the expected value under randomness (centered around 1), indicating positive spatial autocorrelation.

### Spatial Correlogram

It is a plot of the spatial autocorrelation coefficient on the y-axis and the distance (or spatial lag) on the x-axis.

```{r}
MI_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="I", 
                          style="W")
plot(MI_corr)
```

```{r}
print(MI_corr)
```

#### Question: What statistical observation can you draw from the plot above?

Lag 1 has the highest Moran's value (0.3007500)

Lags 1, 2, 3, 5, and 6 have significant Moran’s I values, meaning the spatial autocorrelation at these distances is statistically significant and not random.

Lag 4 has a positive Moran's I value (0.0299470), but it is not statistically significant, suggesting that the spatial autocorrelation at this distance is weak and might be due to random variation.

```{r}
GC_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="C", 
                          style="W")
plot(GC_corr)
```

```{r}
print(GC_corr)
```

#### Question: What statistical observation can you draw from the plot above?

Lags 1, 2, and 5 have statistically significant Geary’s C values, meaning the spatial autocorrelation at these distances is strong and not random.\
Lag 1 and 2: Positive spatial autocorrelation (clusters of similar values).\
Lag 5: Negative spatial autocorrelation (dissimilar values are neighbors).\
Lags 3, 4, and 6 are not statistically significant, indicating weak or random spatial autocorrelation at these distances.


### Local Measures (LMSA)

Focus on identifying patterns at a local level rather than across the entire dataset or study area


### Computing local Moran's I

```{r}
fips <- order(hunan$County)
localMI <- localmoran(hunan$GDPPC, rswm_q)
head(localMI)
```
Region 1 close to 0 = no strong pattern
Region 6 weak negative spatial autocorrelation

Z.li = Z score
Positive z score = positive spatial autocorrelation

Pr() = p-value


```{r}
fips
```



```{r}
printCoefmat(data.frame(
  localMI[fips,], 
  row.names=hunan$County[fips]),
  check.names=FALSE)
```
```{r}
hunan.localMI <- cbind(hunan,localMI) %>%
  rename(Pr.Ii = Pr.z....E.Ii..)
```

```{r}
tm_shape(hunan.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty",
          palette = "RdBu",
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)
```
Dark blue = strong positive spatial autocorrelation

```{r}
tm_shape(hunan.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)
```
```{r}
localMI.map <- tm_shape(hunan.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty", 
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)

pvalue.map <- tm_shape(hunan.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)

tmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)
```
## Creating a LISA cluster map

First, plot the Moran scatter plot

```{r}
nci <- moran.plot(hunan$GDPPC, rswm_q,
                  labels=as.character(hunan$County), 
                  xlab="GDPPC 2012", 
                  ylab="Spatially Lag GDPPC 2012")
```
Plot Moran scatterplot with standardized variable

```{r}
hunan$Z.GDPPC <- scale(hunan$GDPPC) %>% 
  as.vector 
```


```{r}
nci2 <- moran.plot(hunan$Z.GDPPC, rswm_q,
                   labels=as.character(hunan$County),
                   xlab="z-GDPPC 2012", 
                   ylab="Spatially Lag z-GDPPC 2012")
```
Preparing LISA map clasess


```{r}
quadrant <- vector(mode="numeric",length=nrow(localMI))
```


```{r}
hunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)
DV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     
```

```{r}
LM_I <- localMI[,1] - mean(localMI[,1])    
```

```{r}
signif <- 0.05       
```

```{r}
quadrant[DV <0 & LM_I>0] <- 1
quadrant[DV >0 & LM_I<0] <- 2
quadrant[DV <0 & LM_I<0] <- 3  
quadrant[DV >0 & LM_I>0] <- 4      
```

```{r}
quadrant[localMI[,5]>signif] <- 0
```

```{r}
quadrant <- vector(mode="numeric",length=nrow(localMI))
hunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)
DV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     
LM_I <- localMI[,1]   
signif <- 0.05       
quadrant[DV <0 & LM_I>0] <- 1
quadrant[DV >0 & LM_I<0] <- 2
quadrant[DV <0 & LM_I<0] <- 3  
quadrant[DV >0 & LM_I>0] <- 4    
quadrant[localMI[,5]>signif] <- 0
```

```{r}
hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)
```
```{r}
gdppc <- qtm(hunan, "GDPPC")

hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

LISAmap <- tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)

tmap_arrange(gdppc, LISAmap, 
             asp=1, ncol=2)
```
### Question: What statistical observations can you draw from the LISA map above?
The red areas are referred to as hot spots
The blue areas are referred to as cold spots


## Hot spot and Cold spot analysis
```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```


```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

```{r}
coords <- cbind(longitude, latitude)
```

```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```
```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```
```{r}
wm62_lw <- nb2listw(wm_d62, style = 'B')
summary(wm62_lw)
```
```{r}
knn <- knn2nb(knearneigh(coords, k=8))
knn
```
```{r}
knn_lw <- nb2listw(knn, style = 'B')
summary(knn_lw)
```

```{r}
fips <- order(hunan$County)
gi.fixed <- localG(hunan$GDPPC, wm62_lw)
gi.fixed
```
```{r}
hunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%
  rename(gstat_fixed = as.matrix.gi.fixed.)
```

```{r}
gdppc <- qtm(hunan, "GDPPC")

Gimap <-tm_shape(hunan.gi) +
  tm_fill(col = "gstat_fixed", 
          style = "pretty",
          palette="-RdBu",
          title = "local Gi") +
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, Gimap, asp=1, ncol=2)
```
```{r}
fips <- order(hunan$County)
gi.adaptive <- localG(hunan$GDPPC, knn_lw)
hunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%
  rename(gstat_adaptive = as.matrix.gi.adaptive.)
```


```{r}
gdppc<- qtm(hunan, "GDPPC")

Gimap <- tm_shape(hunan.gi) + 
  tm_fill(col = "gstat_adaptive", 
          style = "pretty", 
          palette="-RdBu", 
          title = "local Gi") + 
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, 
             Gimap, 
             asp=1, 
             ncol=2)
```
### Question: What statistical observation can you draw from the Gi map above?

The regions shaded in red represent hot spots. 
The regions shaded in dark blue represent cold spots.
The regions shaded in light peach do not show significant clustering patterns.
