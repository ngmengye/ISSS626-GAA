---
title: "Hands-on Exercise 08"
author: "Ng Meng Ye"
---


# Geographically Weighted Predictive Models

Predictive modelling uses statistical learning or machine learning techniques to predict outcomes.

Random forest method.

### The data


```{r}
pacman::p_load(sf, spdep, GWmodel, SpatialML, 
               tmap, rsample, Metrics, tidyverse)
```


Read the input data sets. It is in **simple feature data frame**.


```{r}
mdata <- read_rds("C:/ngmengye/ISSS626-GAA/Hands-on_exercise/Hands-on_ex08/data/mdata.rds") %>% st_jitter(amount = 2)
```

results = round up if amount is too small
all geometry will change, no just overlapped point
you can check the difference before and after.

6 digits postal code, one building can have multiple points. 

GWR cannot use same data point.


Split into training and test data, 65% for training, 35% for test `initial_split()` of **rsample**


```{r}
set.seed(1234)
resale_split <- initial_split(mdata, 
                              prop = 6.5/10,)
train_data <- training(resale_split)
test_data <- testing(resale_split)
```

```{r}
write_rds(train_data, "C:/ngmengye/ISSS626-GAA/Hands-on_exercise/Hands-on_ex08/data/train_data.rds")
write_rds(test_data, "C:/ngmengye/ISSS626-GAA/Hands-on_exercise/Hands-on_ex08/data/test_data.rds")
```


### Examine sign of multicollinearity


```{r}
mdata_nogeo <- mdata %>%
  st_drop_geometry()
corrplot::corrplot(cor(mdata_nogeo[, 2:17]), 
                   diag = FALSE, 
                   order = "AOE",
                   tl.pos = "td", 
                   tl.cex = 0.5, 
                   method = "number", 
                   type = "upper")
```


No sign of multicolinearity, correlation value = 0.8


```{r}
train_data <- read_rds("C:/ngmengye/ISSS626-GAA/Hands-on_exercise/Hands-on_ex08/data/train_data.rds")
test_data <- read_rds("C:/ngmengye/ISSS626-GAA/Hands-on_exercise/Hands-on_ex08/data/test_data.rds")
```


### Build non-spatial multiple linear regression


```{r}
price_mlr <- lm(resale_price ~ floor_area_sqm +
                  storey_order + remaining_lease_mths +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL + 
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                data=train_data)
summary(price_mlr)
```


Residuals = differences between the actual resale prices and the predicted resale prices by the model Median residual is close to 0, which suggests that the model doesnt have systematic bias in its predictions.

Estimate = coefficient = 2780.70 SGD resale price increase for every additional square meter in floor area.

Residual standard error: standard deviation of the residuals, on average, the model's prediction is off by about SGD61,650


```{r}
write_rds(price_mlr, "C:/ngmengye/ISSS626-GAA/Hands-on_exercise/Hands-on_ex08/data/price_mlr.rds" ) 
```


## GWR predictive method

Convert sf to spatialpointdataframe


```{r}
train_data_sp <- as_Spatial(train_data)
train_data_sp
```


Computing adaptive bandwidth


```{r}
bw_adaptive <- bw.gwr(resale_price ~ floor_area_sqm +
                  storey_order + remaining_lease_mths +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL + 
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                  data=train_data_sp,
                  approach="CV",
                  kernel="gaussian",
                  adaptive=TRUE,
                  longlat=FALSE)
```


40 neighbour points = optimal


```{r}
write_rds(bw_adaptive, "C:/ngmengye/ISSS626-GAA/Hands-on_exercise/Hands-on_ex08/data/bw_adaptive.rds")
```


Construct the adaptive bandwidth gwr model


```{r}
bw_adaptive <- read_rds("C:/ngmengye/ISSS626-GAA/Hands-on_exercise/Hands-on_ex08/data/bw_adaptive.rds")
```

```{r}
gwr_adaptive <- gwr.basic(formula = resale_price ~
                            floor_area_sqm + storey_order +
                            remaining_lease_mths + PROX_CBD + 
                            PROX_ELDERLYCARE + PROX_HAWKER +
                            PROX_MRT + PROX_PARK + PROX_MALL + 
                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                            WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                            WITHIN_1KM_PRISCH,
                          data=train_data_sp,
                          bw=bw_adaptive, 
                          kernel = 'gaussian', 
                          adaptive=TRUE,
                          longlat = FALSE)
```

```{r}
write_rds(gwr_adaptive, "C:/ngmengye/ISSS626-GAA/Hands-on_exercise/Hands-on_ex08/data/gwr_adaptive.rds")
```


Retrieve gwr output object


```{r}
gwr_adaptive <- read_rds("C:/ngmengye/ISSS626-GAA/Hands-on_exercise/Hands-on_ex08/data/gwr_adaptive.rds")
```

```{r}
gwr_adaptive
```


Convert the test data from sf data.frame to SpatialPointDataFrame


```{r}
test_data_sp <- as_Spatial(test_data)
test_data_sp
```


Computing adaptive bandwidth for the test data


```{r}
gwr_bw_test_adaptive <- bw.gwr(resale_price ~ floor_area_sqm +
                  storey_order + remaining_lease_mths +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL + 
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                  data=test_data_sp,
                  approach="CV",
                  kernel="gaussian",
                  adaptive=TRUE,
                  longlat=FALSE)
```


Computing predicted values of the test data


```{r}
# gwr_pred <- gwr.predict(formula = resale_price ~
#                           floor_area_sqm + storey_order +
#                           remaining_lease_mths + PROX_CBD + 
#                           PROX_ELDERLYCARE + PROX_HAWKER + 
#                           PROX_MRT + PROX_PARK + PROX_MALL + 
#                           PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
#                           WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + 
#                           WITHIN_1KM_PRISCH, 
#                         data=train_data_sp, 
#                         predictdata = test_data_sp,
#                         p=2,
#                         theta=0,
#                         bw=40, 
#                         kernel = 'gaussian', 
#                         adaptive=TRUE, 
#                         longlat = FALSE)
```


## Preparing coordinates data

Extract the x,y coordinates of the full, training and test data sets.


```{r}
coords <- st_coordinates(mdata)
coords_train <- st_coordinates(train_data)
coords_test <- st_coordinates(test_data)
```


Write all the output into rds for future used


```{r}
coords_train <- write_rds(coords_train, "C:/ngmengye/ISSS626-GAA/Hands-on_exercise/Hands-on_ex08/data/coords_train.rds" )
coords_test <- write_rds(coords_test, "C:/ngmengye/ISSS626-GAA/Hands-on_exercise/Hands-on_ex08/data/coords_test.rds" )
```

```{r}
train_data <- train_data %>% 
  st_drop_geometry()
```


Calibrating random forest model using `ranger` package


```{r}
set.seed(1234)
rf <- ranger(resale_price ~ floor_area_sqm + storey_order + 
               remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + 
               PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL + 
               PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
               WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + 
               WITHIN_1KM_PRISCH,
             data=train_data)
rf
```

```{r}
write_rds(rf, "C:/ngmengye/ISSS626-GAA/Hands-on_exercise/Hands-on_ex08/data/rf.rds")
```

```{r}
rf <- read_rds("C:/ngmengye/ISSS626-GAA/Hands-on_exercise/Hands-on_ex08/data/rf.rds")
rf
```


Mtry = The number of predictor variables randomly chosen for consideration at each split in a tree. Mtry of 3 means that 3 variables are randomly selected at each split to determine the best split.

Target node size: 5, min number of observations allowed in a terminal node of a tree. Here it indicates that each final node in the tree will have at least 5 observations.

variance importance mode: no additional variable importance metrics are reported in this output.

Splitrule: variance = reduce the overall variancce in the target variable

Out-of-bad(OOB)Prediction Error (MSE): Means Squared Error = 728602496 based on the Out-of-Bag samples.

R-squared (OOB) = explain 95% of the variance in the resale prices, which indicates a very strong fit.

### Calibrating Geographical Random Forest Model using `grf()` of **SpatialML** package


```{r}
# set.seed(1234)
# gwRF_adaptive <- grf(formula = resale_price ~ floor_area_sqm + storey_order +
#                        remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE +
#                        PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL +
#                        PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
#                        WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
#                        WITHIN_1KM_PRISCH,
#                      dframe=train_data, 
#                      bw=55,
#                      kernel="adaptive",
#                      coords=coords_train)
```


Save the model output


```{r}
# write_rds(gwRF_adaptive, "C:/ngmengye/ISSS626-GAA/Hands-on_exercise/Hands-on_ex08/data/gwRF_adaptive.rds")
```


Retrieve the save model


```{r}
# gwRF_adaptive <- read_rds("C:/ngmengye/ISSS626-GAA/Hands-on_exercise/Hands-on_ex08/data/gwRF_adaptive.rds")
```


### Predicting the test data


```{r}
test_data <- cbind(test_data, coords_test) %>%
  st_drop_geometry()
```

```{r}
# gwRF_pred <- predict.grf(gwRF_adaptive, 
#                            test_data, 
#                            x.var.name="X",
#                            y.var.name="Y", 
#                            local.w=1,
#                            global.w=0)
```


Save the output into rds file


```{r}
# GRF_pred <- write_rds(gwRF_pred, "C:/ngmengye/ISSS626-GAA/Hands-on_exercise/Hands-on_ex08/data/GRF_pred.rds")
```

