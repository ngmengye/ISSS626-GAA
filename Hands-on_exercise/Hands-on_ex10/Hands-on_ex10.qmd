---
title: "Hands-on Exercise 10"
author: "Ng Meng Ye"
---

# **Spatial Interaction Models**

Build an OD matrix by using `Passenger Volume by Origin Destination Bus Stops` data set downloaded from `LTA DataMall`.

### The data

```{r}
pacman::p_load(tmap, sf, DT, stplanr, tidyverse)
```

# Geospatial Data Wrangling

## Importing the OD data

Import `Passenger Volume by Origin Destination Bus Stops`

```{r}
odbus <- read_csv("C:/ngmengye/ISSS626-GAA/Hands-on_exercise/Hands-on_ex10/data/aspatial/origin_destination_bus_202210.csv")
```

```{r}
glimpse(odbus)
```

Convert these data values from numeric data type into character data type

```{r}
odbus$ORIGIN_PT_CODE <- as.factor(odbus$ORIGIN_PT_CODE)
odbus$DESTINATION_PT_CODE <- as.factor(odbus$DESTINATION_PT_CODE) 
```

Extracting the study data

Extract commuting flows on weekday and between 6 and 9 o'clock.

```{r}
odbus6_9 <- odbus %>%
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 6 &
           TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE,
           DESTINATION_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
```

```{r}
datatable(odbus6_9)
```

Save the output in rds format for future used.

```{r}
write_rds(odbus6_9, "C:/ngmengye/ISSS626-GAA/Hands-on_exercise/Hands-on_ex10/data/rds/odbus6_9.rds")
```

The code chunk below will be used to import the save odbus6_9.rds into R environment.

```{r}
odbus6_9 <- read_rds("C:/ngmengye/ISSS626-GAA/Hands-on_exercise/Hands-on_ex10/data/rds/odbus6_9.rds")
```

Two geospatial data:

-   BusStop: This data provides the location of bus stop as at last quarter of 2022

-   MPSZ-2019: This data provides the sub-zone boundary of URA Master Plan 2019

```{r}
busstop <- st_read(dsn = "C:/ngmengye/ISSS626-GAA/Hands-on_exercise/Hands-on_ex10/data/geospatial",
                   layer = "BusStop") %>%
  st_transform(crs = 3414)
```

```{r}
mpsz <- st_read(dsn = "C:/ngmengye/ISSS626-GAA/Hands-on_exercise/Hands-on_ex10/data/geospatial",
                   layer = "MPSZ-2019") %>%
  st_transform(crs = 3414)
```

```{r}
mpsz
```

```{r}
mpsz <-  write_rds(mpsz, "C:/ngmengye/ISSS626-GAA/Hands-on_exercise/Hands-on_ex10/data/rds/mpsz.rds")
```

Combine Busstip and mpsz

```{r}
busstop_mpsz <- st_intersection(busstop, mpsz) %>%
  select(BUS_STOP_N, SUBZONE_C) %>%
  st_drop_geometry()
```

```{r}
datatable(busstop_mpsz)
```

Save the output into rds format

```{r}
write_rds(busstop_mpsz, "C:/ngmengye/ISSS626-GAA/Hands-on_exercise/Hands-on_ex10/data/rds/busstop_mpsz.rds")  
```

Append the planning subzone code from busstop_mpsz data frame onto odbus6_9 data frame.

```{r}
od_data <- left_join(odbus6_9 , busstop_mpsz,
            by = c("ORIGIN_PT_CODE" = "BUS_STOP_N")) %>%
  rename(ORIGIN_BS = ORIGIN_PT_CODE,
         ORIGIN_SZ = SUBZONE_C,
         DESTIN_BS = DESTINATION_PT_CODE)
```

Check for duplicating records

```{r}
duplicate <- od_data %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()
```

Retain the unique records if duplicate records are found

```{r}
od_data <- unique(od_data)
```

Confirm if the duplicating records issue has been addressed fully.

```{r}
od_data <- left_join(od_data , busstop_mpsz,
            by = c("DESTIN_BS" = "BUS_STOP_N")) 
```

```{r}
duplicate <- od_data %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()
```

```{r}
od_data <- unique(od_data)
```

```{r}
od_data <- od_data %>%
  rename(DESTIN_SZ = SUBZONE_C) %>%
  drop_na() %>%
  group_by(ORIGIN_SZ, DESTIN_SZ) %>%
  summarise(MORNING_PEAK = sum(TRIPS))
```

```{r}
write_rds(od_data, "C:/ngmengye/ISSS626-GAA/Hands-on_exercise/Hands-on_ex10/data/rds/od_data_fii.rds")
```

```{r}
od_data_fii <- read_rds("C:/ngmengye/ISSS626-GAA/Hands-on_exercise/Hands-on_ex10/data/rds/od_data.rds")
```

Visualizing Spatial Interaction

remove intra-zonal flows

```{r}
od_data_fij <- od_data[od_data$ORIGIN_SZ!=od_data$DESTIN_SZ,]
```

```{r}
write_rds(od_data_fij, "C:/ngmengye/ISSS626-GAA/Hands-on_exercise/Hands-on_ex10/data/rds/od_data_fij.rds")
```

```{r}
od_data_fij <- read_rds("C:/ngmengye/ISSS626-GAA/Hands-on_exercise/Hands-on_ex10/data/rds/od_data_fij.rds")
```

Creating desire lines

```{r}
flowLine <- od2line(flow = od_data_fij, 
                    zones = mpsz,
                    zone_code = "SUBZONE_C")
```

```{r}
write_rds(flowLine, "C:/ngmengye/ISSS626-GAA/Hands-on_exercise/Hands-on_ex10/data/rds/flowLine.rds")
```

```{r}
flowLine <- read_rds("C:/ngmengye/ISSS626-GAA/Hands-on_exercise/Hands-on_ex10/data/rds/flowLine.rds")
```

Visualizing the desire lines

```{r}
tm_shape(mpsz) +
  tm_polygons() +
flowLine %>%  
tm_shape() +
  tm_lines(lwd = "MORNING_PEAK",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3)
```

The flow data are very messy and highly skewed like the one shown above, it is wiser to focus on selected flows.

```{r}
tm_shape(mpsz) +
  tm_polygons() +
flowLine %>%  
  filter(MORNING_PEAK >= 5000) %>%
tm_shape() +
  tm_lines(lwd = "MORNING_PEAK",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3)
```

# Calibrating Spatial Interaction Models

-   Unconstrained

-   Production-constrained

-   Attraction-constrained

-   Doubly-constrained


Case study: calibrate SIM to determine factors affecting the public bus passenger flows during the morning peak in Singapore

```{r}
pacman::p_load(tmap, sf, sp,
               performance, reshape2,
               ggpubr, tidyverse)
```

Computing distance matrix

```{r}
mpsz <- read_rds("C:/ngmengye/ISSS626-GAA/Hands-on_exercise/Hands-on_ex10/data/rds/mpsz.rds")
mpsz
```
Convert from sf data.table to SP Data Frame

```{r}
mpsz_sp <- as(mpsz, "Spatial")
mpsz_sp
```
```{r}
dist <- spDists(mpsz_sp, 
                longlat = FALSE)
```

```{r}
head(dist, n=c(10, 10))
```
Labelling column and row headers of a distance matrix

```{r}
sz_names <- mpsz$SUBZONE_C
```

```{r}
colnames(dist) <- paste0(sz_names)
rownames(dist) <- paste0(sz_names)
```

```{r}
distPair <- melt(dist) %>%
  rename(dist = value)
head(distPair, 10)
```

Updating intra-zonal distance

```{r}
distPair %>%
  filter(dist > 0) %>%
  summary()
```

```{r}
distPair$dist <- ifelse(distPair$dist == 0,
                        50, distPair$dist)
```

```{r}
distPair %>%
  summary()
```
```{r}
distPair <- distPair %>%
  rename(orig = Var1,
         dest = Var2)
```


```{r}
write_rds(distPair, "C:/ngmengye/ISSS626-GAA/Hands-on_exercise/Hands-on_ex10/data/rds/distPair.rds") 
```

```{r}
distPair <- read_rds("C:/ngmengye/ISSS626-GAA/Hands-on_exercise/Hands-on_ex10/data/rds/distPair.rds")
```

Preparing flow data

```{r}
od_data_fii <- read_rds("C:/ngmengye/ISSS626-GAA/Hands-on_exercise/Hands-on_ex10/data/rds/od_data_fii.rds")
```

```{r}
flow_data <- od_data_fii %>%
  group_by(ORIGIN_SZ, DESTIN_SZ) %>% 
  summarize(TRIPS = sum(MORNING_PEAK)) 
```

Separate intra-flow from passenger volume df
```{r}
flow_data$FlowNoIntra <- ifelse(
  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, 
  0, flow_data$TRIPS)
flow_data$offset <- ifelse(
  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, 
  0.000001, 1)
```

Combine passenger volume data with distance value

```{r}
flow_data$ORIGIN_SZ <- as.factor(flow_data$ORIGIN_SZ)
flow_data$DESTIN_SZ <- as.factor(flow_data$DESTIN_SZ)
```


```{r}
flow_data1 <- flow_data %>%
  left_join (distPair,
             by = c("ORIGIN_SZ" = "orig",
                    "DESTIN_SZ" = "dest"))
```

```{r}
flow_data1
```


Preparing Origin and Destination Attributes
Importing population data
```{r}
pop <- read_csv("C:/ngmengye/ISSS626-GAA/Hands-on_exercise/Hands-on_ex10/data/aspatial/pop.csv")
```
Geospatila data wrangling
```{r}
pop <- pop %>%
  left_join(mpsz,
            by = c("PA" = "PLN_AREA_N",
                   "SZ" = "SUBZONE_N")) %>%
  select(1:6) %>%
  rename(SZ_NAME = SZ,
         SZ = SUBZONE_C)
```

Preparing origin attribute

```{r}
flow_data1 <- flow_data1 %>%
  left_join(pop,
            by = c(ORIGIN_SZ = "SZ")) %>%
  rename(ORIGIN_AGE7_12 = AGE7_12,
         ORIGIN_AGE13_24 = AGE13_24,
         ORIGIN_AGE25_64 = AGE25_64) %>%
  select(-c(PA, SZ_NAME))
```

Preparing destination attribute
```{r}
flow_data1 <- flow_data1 %>%
  mutate(DESTIN_SZ = as.character(DESTIN_SZ)) %>%
  left_join(pop, by = c("DESTIN_SZ" = "SZ")) %>%
  rename(DESTIN_AGE7_12 = AGE7_12,
         DESTIN_AGE13_24 = AGE13_24,
         DESTIN_AGE25_64 = AGE25_64) %>%
  select(-c(PA, SZ_NAME))

```

```{r}
write_rds(flow_data1, "C:/ngmengye/ISSS626-GAA/Hands-on_exercise/Hands-on_ex10/data/rds/flow_data_6-9.rds")
```

Import the modelling data
```{r}
SIM_data <- read_rds("C:/ngmengye/ISSS626-GAA/Hands-on_exercise/Hands-on_ex10/data/rds/flow_data_6-9.rds")
```

Visualize the dependent variable
```{r}
ggplot(data = SIM_data,
       aes(x = TRIPS)) +
  geom_histogram()
```
```{r}
ggplot(data = SIM_data,
       aes(x = dist,
           y = TRIPS)) +
  geom_point() +
  geom_smooth(method = lm)
```
```{r}
ggplot(data = SIM_data,
       aes(x = log(dist),
           y = log(TRIPS))) +
  geom_point() +
  geom_smooth(method = lm)
```
Checking for variables with zero values

```{r}
summary(SIM_data)
```
The print report above reveals that variables ORIGIN_AGE7_12, ORIGIN_AGE13_24, ORIGIN_AGE25_64,DESTIN_AGE7_12, DESTIN_AGE13_24, DESTIN_AGE25_64 consist of 0 values.
```{r}
SIM_data$DESTIN_AGE7_12 <- ifelse(
  SIM_data$DESTIN_AGE7_12 == 0,
  0.99, SIM_data$DESTIN_AGE7_12)
SIM_data$DESTIN_AGE13_24 <- ifelse(
  SIM_data$DESTIN_AGE13_24 == 0,
  0.99, SIM_data$DESTIN_AGE13_24)
SIM_data$DESTIN_AGE25_64 <- ifelse(
  SIM_data$DESTIN_AGE25_64 == 0,
  0.99, SIM_data$DESTIN_AGE25_64)
SIM_data$ORIGIN_AGE7_12 <- ifelse(
  SIM_data$ORIGIN_AGE7_12 == 0,
  0.99, SIM_data$ORIGIN_AGE7_12)
SIM_data$ORIGIN_AGE13_24 <- ifelse(
  SIM_data$ORIGIN_AGE13_24 == 0,
  0.99, SIM_data$ORIGIN_AGE13_24)
SIM_data$ORIGIN_AGE25_64 <- ifelse(
  SIM_data$ORIGIN_AGE25_64 == 0,
  0.99, SIM_data$ORIGIN_AGE25_64)
```

```{r}
summary(SIM_data)
```
Unconstrained spatial interaction model
```{r}
uncSIM <- glm(formula = TRIPS ~ 
                log(ORIGIN_AGE25_64) + 
                log(DESTIN_AGE25_64) +
                log(dist),
              family = poisson(link = "log"),
              data = SIM_data,
              na.action = na.exclude)
uncSIM
```
R-squared function

```{r}
CalcRSquared <- function(observed,estimated){
  r <- cor(observed,estimated)
  R2 <- r^2
  R2
}
```

```{r}
CalcRSquared(uncSIM$data$TRIPS, uncSIM$fitted.values)
```
```{r}
r2_mcfadden(uncSIM)
```
Origin (Production) constrained SIM

```{r}
orcSIM <- glm(formula = TRIPS ~ 
                 ORIGIN_SZ +
                 log(DESTIN_AGE25_64) +
                 log(dist),
              family = poisson(link = "log"),
              data = SIM_data,
              na.action = na.exclude)
summary(orcSIM)
```

```{r}
CalcRSquared(orcSIM$data$TRIPS, orcSIM$fitted.values)
```

Destination constrained

```{r}
decSIM <- glm(formula = TRIPS ~ 
                DESTIN_SZ + 
                log(ORIGIN_AGE25_64) + 
                log(dist),
              family = poisson(link = "log"),
              data = SIM_data,
              na.action = na.exclude)
summary(decSIM)
```

```{r}
CalcRSquared(decSIM$data$TRIPS, decSIM$fitted.values)
```

Doubly constrained

```{r}
dbcSIM <- glm(formula = TRIPS ~ 
                ORIGIN_SZ + 
                DESTIN_SZ + 
                log(dist),
              family = poisson(link = "log"),
              data = SIM_data,
              na.action = na.exclude)
summary(dbcSIM)
```

```{r}
CalcRSquared(dbcSIM$data$TRIPS, dbcSIM$fitted.values)
```
Model comparison
```{r}
model_list <- list(unconstrained=uncSIM,
                   originConstrained=orcSIM,
                   destinationConstrained=decSIM,
                   doublyConstrained=dbcSIM)
```

```{r}
compare_performance(model_list,
                    metrics = "RMSE")
```

Visualize fitted values

```{r}
df <- as.data.frame(uncSIM$fitted.values) %>%
  round(digits = 0)
```

```{r}
SIM_data <- SIM_data %>%
  cbind(df) %>%
  rename(uncTRIPS = "uncSIM$fitted.values")
```

```{r}
df <- as.data.frame(orcSIM$fitted.values) %>%
  round(digits = 0)
```

```{r}
SIM_data <- SIM_data %>%
  cbind(df) %>%
  rename(orcTRIPS = "orcSIM$fitted.values")
```

```{r}
df <- as.data.frame(decSIM$fitted.values) %>%
  round(digits = 0)
```

```{r}
SIM_data <- SIM_data %>%
  cbind(df) %>%
  rename(decTRIPS = "decSIM$fitted.values")
```



```{r}
df <- as.data.frame(dbcSIM$fitted.values) %>%
  round(digits = 0)
```

```{r}
SIM_data <- SIM_data %>%
  cbind(df) %>%
  rename(dbcTRIPS = "dbcSIM$fitted.values")
```



```{r}
unc_p <- ggplot(data = SIM_data,
                aes(x = uncTRIPS,
                    y = TRIPS)) +
  geom_point() +
  geom_smooth(method = lm)

orc_p <- ggplot(data = SIM_data,
                aes(x = orcTRIPS,
                    y = TRIPS)) +
  geom_point() +
  geom_smooth(method = lm)

dec_p <- ggplot(data = SIM_data,
                aes(x = decTRIPS,
                    y = TRIPS)) +
  geom_point() +
  geom_smooth(method = lm)

dbc_p <- ggplot(data = SIM_data,
                aes(x = dbcTRIPS,
                    y = TRIPS)) +
  geom_point() +
  geom_smooth(method = lm)
```

```{r}
ggarrange(unc_p, orc_p, dec_p, dbc_p,
          ncol = 2,
          nrow = 2)
```

