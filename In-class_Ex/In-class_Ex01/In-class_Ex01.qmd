---
title: "In-class_Ex01"
---

```{r}
pacman::p_load(tidyverse, sf, tmap, ggstatsplot)
```

```{r}
mpsz14_shp <- st_read(dsn = "data/",
                layer = "MP14_SUBZONE_WEB_PL")    
```


mpsz14_kml <- st_read("C:/ngmengye/ISSS626-GAA/In-class_Ex/In-class_Ex01/data/MasterPlan2014SubzoneBoundaryWebKML.kml")

```{r}
st_write(mpsz14_shp, 
         "data/MP14_SUBZONE_WEB_PL.kml",
         delete_dsn = TRUE)
```

```{r}
preschool_kml <- st_read("data/PreschoolsLocation.kml")%>% 
  st_transform(crs=3414)
```

```{r}
preschool_geojson <- st_read("data/PreschoolsLocation.geojson")

```
```{r}
mpsz19_shp <- st_read(dsn="C:/ngmengye/ISSS626-GAA/In-class_Ex/In-class_Ex02/data/",
                layer = "MPSZ-2019") %>% 
  st_transform(crs=3414)
```
```{r}
mpsz19_kml <- st_read("data/MasterPlan2019SubzoneBoundaryNoSeaKML.kml")
```
```{r}
st_crs(mpsz19_shp)
```
```{r}
st_crs(mpsz19_kml)
```
```{r}
st_crs(preschool_geojson)
```
```{r}
st_crs(preschool_kml)
```
```{r}
st_crs(mpsz14_shp)
```
```{r}
preschool <- st_read("data/PreSchoolsLocation.kml") %>% 
  st_transform(crs=3414)
```
```{r}
st_crs(preschool)
```
```{r}
intersect_list <- st_intersects(mpsz19_shp, preschool)
print(intersect_list)
```
```{r}
intersect_lengths <- lengths(intersect_list)
print(intersect_lengths)
```
```{r}
# Mutate `mpsz19_shp` to add the "PreSch Count" column
mpsz19_shp <- mpsz19_shp %>%
  mutate(`PreSch Count` = intersect_lengths)
```

```{r}
mpsz19_shp <- mpsz19_shp %>%
  mutate(Area = units::drop_units(
    st_area(.)),
    `PreSch Density` = `PreSch Count` / Area * 1000000
  )
```



```{r}
mpsz19_shp$`PreSch Density` <- as.numeric(as.character(mpsz19_shp$`PreSch Density`))

mpsz19_shp$`PreSch Count` <- as.numeric(as.character(mpsz19_shp$`PreSch Count`))

mpsz19_shp_1 <- as.data.frame(mpsz19_shp)

str(mpsz19_shp_1)
```
```{r}

ggscatterstats(
  data = mpsz19_shp_1,
  x = `PreSch Density`,
  y = `PreSch Count`,
  type = 'parametric',
  label.var = SUBZONE_N,  # Column to be used for labeling
  label.expression = `PreSch Count` > 50 & `PreSch Density` > 10  # 
)

```
```{r}
popdata <- read_csv("data/respopagesextod2023.csv")
```
```{r}
popdata2023 <- popdata %>% 
  group_by(PA,SZ,AG) %>% 
  summarise(`POP`=sum(`Pop`)) %>% 
  ungroup() %>% 
  pivot_wider(names_from = AG,
              values_from = POP)
```
```{r}
popdata2023 <- popdata2023 %>%
  mutate(YOUNG=rowSums(.[3:6]) # Aged 0 - 24, 10 - 24
         +rowSums(.[14])) %>% # Aged 5 - 9
  mutate(`ECONOMY ACTIVE` = rowSums(.[7:13])+ # Aged 25 - 59
  rowSums(.[15])) %>%  # Aged 60 -64
  mutate(`AGED`=rowSums(.[16:21])) %>%
  mutate(`TOTAL`=rowSums(.[3:21])) %>%
  mutate(`DEPENDENCY`=(`YOUNG` + `AGED`)
  / `ECONOMY ACTIVE`) %>% 
  select(`PA`, `SZ`, `YOUNG`, 
         `ECONOMY ACTIVE`, `AGED`,
         `TOTAL`, `DEPENDENCY`)

```

```{r}
popdata2023 <- popdata2023 %>%
  mutate_at(.vars = vars(PA, SZ), 
          .funs = list(toupper)) 
```
```{r}
mpsz_pop2023 <- left_join(mpsz19_shp, popdata2023,
                          by = c("SUBZONE_N" = "SZ"))
```
```{r}
pop2023_mpsz <- left_join(popdata2023, mpsz19_shp, 
                          by = c("SZ" = "SUBZONE_N"))
```


```{r}
mpsz_pop2023 <- mpsz_pop2023 %>% 
  drop_na()
```

```{r}
get.var <- function(vname,df) {
  v <- df[vname] %>% 
    st_set_geometry(NULL)
  v <- unname(v[,1])
  return(v)
}
```


```{r}
percentmap <- function(vnam, df, legtitle=NA, mtitle="Percentile Map"){
  percent <- c(0,.01,.1,.5,.9,.99,1)
  var <- get.var(vnam, df)
  bperc <- quantile(var, percent)
  tm_shape(mpsz_pop2023) +
  tm_polygons() +
  tm_shape(df) +
     tm_fill(vnam,
             title=legtitle,
             breaks=bperc,
             palette="Blues",
          labels=c("< 1%", "1% - 10%", "10% - 50%", "50% - 90%", "90% - 99%", "> 99%"))  +
  tm_borders() +
  tm_layout(main.title = mtitle, 
            title.position = c("right","bottom"))
}
```

```{r}
percentmap("DEPENDENCY",mpsz_pop2023)
```
```{r}
ggplot(data = mpsz_pop2023,
       aes(x = "",
           y = DEPENDENCY)) +
  geom_boxplot()
```
```{r}
boxbreaks <- function(v,mult=1.5) {
  qv <- unname(quantile(v))
  iqr <- qv[4] - qv[2]
  upfence <- qv[4] + mult * iqr
  lofence <- qv[2] - mult * iqr
  # initialize break points vector
  bb <- vector(mode="numeric",length=7)
  # logic for lower and upper fences
  if (lofence < qv[1]) {  # no lower outliers
    bb[1] <- lofence
    bb[2] <- floor(qv[1])
  } else {
    bb[2] <- lofence
    bb[1] <- qv[1]
  }
  if (upfence > qv[5]) { # no upper outliers
    bb[7] <- upfence
    bb[6] <- ceiling(qv[5])
  } else {
    bb[6] <- upfence
    bb[7] <- qv[5]
  }
  bb[3:5] <- qv[2:4]
  return(bb)
}
```

```{r}
get.var <- function(vname,df) {
  v <- df[vname] %>% st_set_geometry(NULL)
  v <- unname(v[,1])
  return(v)
}
```

```{r}
boxmap <- function(vnam, df, 
                   legtitle=NA,
                   mtitle="Box Map",
                   mult=1.5){
  var <- get.var(vnam,df)
  bb <- boxbreaks(var)
  tm_shape(df) +
    tm_polygons() +
  tm_shape(df) +
     tm_fill(vnam,title=legtitle,
             breaks=bb,
             palette="Blues",
          labels = c("lower outlier", 
                     "< 25%", 
                     "25% - 50%", 
                     "50% - 75%",
                     "> 75%", 
                     "upper outlier"))  +
  tm_borders() +
  tm_layout(main.title = mtitle, 
            title.position = c("left",
                               "top"))
}
```


```{r}
boxmap("DEPENDENCY", mpsz_pop2023)
```
```{r}
tmap_options(check.and.fix = TRUE)
tmap_mode("view")
boxmap("DEPENDENCY", mpsz_pop2023)
```