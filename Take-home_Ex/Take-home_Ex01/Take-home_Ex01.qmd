---
title: "Take-home Exercise 1: Geospatial Analytics for Public Good"
author: "Ng Meng Ye"
date-modified:  "2024-09-21"
date: 2024-09-03
---

## 1 Overview

Thailandâ€™s roads are the deadliest in Southeast Asia and among the worst in the world, according to the World Health Organisation. About 20,000 people die in road accidents each year, or about 56 deaths a day (WHO).

## 2 Getting Started

### 2.1 Objectives

In view of this, we need discover factors affecting road traffic accidents in the Bangkok Metropolitan Region BMR by employing both spatial spatio-temporal point patterns analysis methods.

The specific objectives of this take-home exercise are as follows:

-   To visualize the spatio-temporal dynamics of road traffic accidents in BMR using appropriate statistical graphics and geovisualization methods.

-   To conduct detailed spatial analysis of road traffic accidents using appropriate Network Spatial Point Patterns Analysis methods.

-   To conduct detailed spatio-temporal analysis of road traffic accidents using appropriate Temporal Network Spatial Point Patterns Analysis methods.

### 2.2 The Study Area

The focus of this study would in the Bangkok Metropolitan Region BMR, which includes the provinces:

1.  Bangkok

2.  Nonthaburi

3.  Nakhon Pathom

4.  Pathum Thani

5.  Samut Prakan

6.  Samut Sakhon

## 3 Data Preparation

### 3.1 Geospatial

These data sets are in `shp` format

-   Thailand Roads, available publicly from [HDX](https://data.humdata.org/dataset/hotosm_tha_roads)
-   Thailand - Subnational Administrative Boundaries, available publicly from [HDX](https://data.humdata.org/dataset/cod-ab-tha?)

This data sets are in `csv` format

-   Thailand Road Accident \[2019-2022\], available publicly from [Kaggle](https://www.kaggle.com/datasets/thaweewatboy/thailand-road-accident-2019-2022)

```{r}
#| output: false
set.seed(1234)
pacman::p_load(sf,raster,spatstat,tmap,tidyverse,sp,maptools,spNetwork)
```

## 4 Data Wrangling

### 4.1 Thailand Road Accident 2019-2022

#### 4.1.1 Importing Attribute Data into R

We will import thai_road_accident_2019_2022.csv file into RStudio and save the file into an R dataframe called rdacc

```{r}
rdacc <- read_csv("C:/ngmengye/ISSS626-GAA/Take-home_Ex/Take-home_Ex01/data/aspatial/thai_road_accident_2019_2022.csv")
```

#### 4.1.2 Filtering missing values

To define the geometry of each point, we need to use the latitude and longitude coordinates. Before converting the data frame to an `sf` object, we need to ensure that there are no missing values in the latitude and longitude columns.

Since only 359 out of 81,735 rows have missing values, it is reasonable to remove them.

```{r}
lat_na <- sum(is.na(rdacc$latitude))
long_na <- sum(is.na(rdacc$longitude))

total_rows <- nrow(rdacc)

lat_na_pct <- (lat_na / total_rows) * 100
long_na_pct <- (long_na / total_rows) * 100

cat("Missing values in Latitude:", lat_na, "(", round(lat_na_pct, 2), "% )\n")
cat("Missing values in Longitude:", long_na, "(", round(long_na_pct, 2), "% )\n")

```

#### 4.1.3 Creating a simple feature data frame from an aspatial data frame

The code chunk below converts `rdacc` data frame into a simple feature data frame by using `st_as_st()` of **sf** packages

```{r}
# filter out NA or missing data of longitude and latitude
# check how many missing values (make sure less than 25%)
rdacc_sf <- rdacc %>% 
  filter(!is.na(longitude) & longitude != "",
         !is.na(latitude)& latitude != "") %>% 
  st_as_sf(coords = c(
    "longitude", "latitude"),
    crs = 4326) %>% 
  st_transform(crs = 32647)
```

```{r}
# Count the occurrences of each value in the 'weather_condition' column
table(rdacc_sf$weather_condition)

```

```{r}
# Count the occurrences of each value in the 'weather_condition' column
table(rdacc_sf$accident_type)

```

Let's focus on accident where the weather condition is clear and the accident type is read-end collision.

```{r}
# Filter data for clear weather and rear-end collision
radcc_sf_2 <- rdacc_sf[rdacc_sf$weather_condition == "clear" & rdacc_sf$accident_type == "rear-end collision", ]

# View the filtered data

```

::: callout-caution
### 4.2 Correcting the projection

`EPSG: 4326` is wgs84 Geographic Coordinate System and `EPSG: 32647` refers to the WGS 84 / UTM zone 47N Projected Coordinate System, which is specifically used for areas in Thailand.
:::

#### 4.2.1 Plotting the Aspatial Data

We use `st_geometry` to display basic information of the feature class such as type of geometry. It looks like the plot is showing points scattered across a wide area, which suggests that your data includes locations outside the Bangkok Metropolitan Region (BMR).

```{r}
plot(st_geometry(radcc_sf_2))
```

To focus only on data within the BMR, we need to filter the dataset for coordinates that fall within the region.

```{r}
rdacc_bmr_sf <- radcc_sf_2 %>%
  filter(province_en %in% c("Bangkok", "Nonthaburi", "Nakhon Pathom", "Pathum Thani", "Samut Prakan", "Samut Sakhon"))
```

Our plot now shows road accident points within the Bangkok Metropolitan Region (BMR) overlaid on the road network. This looks much better than the previous scattered points across a broader region.

```{r}
plot(st_geometry(rdacc_bmr_sf))
```

### 4.3 Thailand Roads

#### 4.3.1 Importing Geospatial Data

We will import `hotosm_tha_roads_lines` shapefile into RStudio as sf data frames.

```{r}
network <- st_read(dsn="C:/ngmengye/ISSS626-GAA/Take-home_Ex/Take-home_Ex01/data/geospatial", 
                   layer="hotosm_tha_roads_lines_shp")
```

```{r}
network <- st_set_crs(network, 4326)
```

```{r}
network32647 <- st_transform(network,32647)
```

```{r}
network32647
```

To see the type of highway

```{r}
unique_values <- unique(network32647$highway)

print(unique_values)
```

According to [Highway classification on WikiProject Thailand](https://wiki.openstreetmap.org/wiki/WikiProject_Thailand#Highway_classification), we should only include urban and local road wide enough for motor cars:

1 secondary\
2 residential\
3 secondary_link\
4 service\
5 tertiary\
6 trunk\
7 trunk_link\
8 primary\
9 primary_link\
10 motorway_link\
11 tertiary_link\
12 motorway\
13 road\
14 living_street

```{r}
highway_types <- c(
"secondary", "tertiary","trunk", "primary", "motorway", "unclassified"
)

# highway_types <- c(
# "secondary", "residential", "secondary_link", "tertiary",
# "trunk", "trunk_link", "primary", "primary_link", "motorway_link",
# "tertiary_link", "motorway", "road", "living_street", "unclassified"
# )


#highway_types <- c("motorway")

filtered_network <- network32647 %>%
  filter(highway %in% highway_types)
```

### 4.4 Thailand - Subnational Administrative Boundaries

#### 4.4.1 Importing Geospatial Data

Thailand administrative level 0 (country), 1 (province), 2 (district), and 3 (sub-district, tambon) boundaries. Since we focus on Bangkok Metropolitan Region, we should import level 1 (province) data. We will import `tha_admbnda_adm1_rtsd_20220121` shapefile into RStudio as sf data frames.

```{r}
thai_map <- st_read(dsn="C:/ngmengye/ISSS626-GAA/Take-home_Ex/Take-home_Ex01/data/geospatial", 
                   layer="tha_admbnda_adm1_rtsd_20220121")
```

```{r}
thai_map_32647 <- st_transform(thai_map, crs = 32647)
```

```{r}
st_crs(thai_map_32647)
```

```{r}
thaiBMR <- thai_map_32647 %>%
  filter(ADM1_EN %in% c("Bangkok", "Nonthaburi", "Nakhon Pathom", "Pathum Thani", "Samut Prakan", "Samut Sakhon"))
```

```{r}
thaiBMR
```

#### 4.4.2 Visualizing the Geospatial Data

```{r}
plot(st_geometry(thaiBMR))
plot(rdacc_bmr_sf$geometry,add=T,col='red',pch = 19)
```

```{r}
# tmap_mode('view')
# tm_shape(thaiBMR) + tm_polygons()+
#   tm_shape(rdacc_bmr_sf$geometry) + 
#   tm_dots()
  
```

```{r}
BMR_network <- st_intersection(filtered_network,thaiBMR)

```

```{r}
# Plot the background (BMR and highways)
plot(st_geometry(thaiBMR), col = "lightblue", main = "BMR with Highways")
plot(st_geometry(BMR_network), col = "black", add = TRUE)

# Add dots for road accidents with smaller size
plot(rdacc_bmr_sf, add = TRUE, col = 'red', pch = 19, cex = 0.5)  # cex = 0.5 makes the dots smaller


```

## 5 Network Constrained Spatial Point Patterns Analysis

### 5.1 Network KDE (NKDE) Analysis - Bangkok

#### 5.1.1 Preparing the lixels objects

```{r}
# Filter for Bangkok only
BMR_network_bangkok <- BMR_network[BMR_network$ADM1_EN == "Bangkok", ]

# Cast to LINESTRING geometry
BMR_network_bangkok_linestring <- st_cast(BMR_network_bangkok, "LINESTRING")
```

```{r}
bangkok_lixels <- lixelize_lines(BMR_network_bangkok_linestring, 700, mindist = 375)
```

#### 5.1.2 Generating the line centre points

```{r}
bangkok_samples <- lines_center(bangkok_lixels) 
```

```{r}
rdacc_bangkok <- rdacc_bmr_sf[rdacc_bmr_sf$province_en == "Bangkok", ]
```

```{r}
densities <- nkde(BMR_network_bangkok_linestring, 
                  events = rdacc_bangkok,
                  w = rep(1, nrow(rdacc_bangkok)),
                  samples = bangkok_samples,
                  kernel_name = "quartic",
                  bw = 300, 
                  div= "bw", 
                  method = "simple", 
                  digits = 1, 
                  tol = 1,
                  grid_shape = c(1,1), 
                  max_depth = 8,
                  agg = 5, 
                  sparse = TRUE,
                  verbose = FALSE)

```

```{r}
bangkok_samples$density <- densities
bangkok_lixels$density <- densities
```

```{r}
# rescaling to help the mapping# rescaling to help the mapping
bangkok_samples$density <- bangkok_samples$density*1000
bangkok_lixels$density <- bangkok_lixels$density*1000
```

```{r}
# Plot using tmap
# tmap_mode('view')
# tm_shape(bangkok_lixels) +
#   tm_lines(col = "density") +
# tm_shape(rdacc_bangkok) +
#   tm_dots()
# tmap_mode('plot')
```

### 5.2 Network KDE (NKDE) Analysis - Nonthaburi

#### 5.2.1 Preparing the lixels objects

```{r}
# Filter for Bangkok only
BMR_network_nonthaburi <- BMR_network[BMR_network$ADM1_EN == "Nonthaburi", ]

# Cast to LINESTRING geometry
BMR_network_nonthaburi_linestring <- st_cast(BMR_network_nonthaburi, "LINESTRING")
```

```{r}
nonthaburi_lixels <- lixelize_lines(BMR_network_nonthaburi_linestring, 700, mindist = 375)
```

#### 5.2.2 Generating the line centre points

```{r}
nonthaburi_samples <- lines_center(nonthaburi_lixels) 
```

```{r}
rdacc_nonthaburi <- rdacc_bmr_sf[rdacc_bmr_sf$province_en == "Nonthaburi", ]
```

```{r}
densities <- nkde(BMR_network_nonthaburi_linestring, 
                  events = rdacc_nonthaburi,
                  w = rep(1, nrow(rdacc_nonthaburi)),
                  samples = nonthaburi_samples,
                  kernel_name = "quartic",
                  bw = 300, 
                  div= "bw", 
                  method = "simple", 
                  digits = 1, 
                  tol = 1,
                  grid_shape = c(1,1), 
                  max_depth = 8,
                  agg = 5, 
                  sparse = TRUE,
                  verbose = FALSE)

```

```{r}
nonthaburi_samples$density <- densities
nonthaburi_lixels$density <- densities
```

```{r}
# rescaling to help the mapping# rescaling to help the mapping
nonthaburi_samples$density <- nonthaburi_samples$density*1000
nonthaburi_lixels$density <- nonthaburi_lixels$density*1000
```

```{r}
# Plot using tmap
# tmap_mode('view')
# tm_shape(nonthaburi_lixels) +
#   tm_lines(col = "density") +
# tm_shape(rdacc_nonthaburi) +
#   tm_dots()
# tmap_mode('plot')
```

### 5.3 Network KDE (NKDE) Analysis - Nakhon Pathom

#### 5.3.1 Preparing the lixels objects
```{r}
# Filter for Bangkok only
BMR_network_nakhonpathom <- BMR_network[BMR_network$ADM1_EN == "Nakhon Pathom", ]

# Cast to LINESTRING geometry
BMR_network_nakhonpathom_linestring <- st_cast(BMR_network_nakhonpathom, "LINESTRING")
```

```{r}
nakhonpathom_lixels <- lixelize_lines(BMR_network_nakhonpathom_linestring, 700, mindist = 375)
```

#### 5.3.2 Generating the line centre points

```{r}
nakhonpathom_samples <- lines_center(nakhonpathom_lixels) 
```

```{r}
rdacc_nakhonpathom <- rdacc_bmr_sf[rdacc_bmr_sf$province_en == "Nakhon Pathom", ]
```

```{r}
densities <- nkde(BMR_network_nakhonpathom_linestring, 
                  events = rdacc_nakhonpathom,
                  w = rep(1, nrow(rdacc_nakhonpathom)),
                  samples = nakhonpathom_samples,
                  kernel_name = "quartic",
                  bw = 300, 
                  div= "bw", 
                  method = "simple", 
                  digits = 1, 
                  tol = 1,
                  grid_shape = c(1,1), 
                  max_depth = 8,
                  agg = 5, 
                  sparse = TRUE,
                  verbose = FALSE)

```

```{r}
nakhonpathom_samples$density <- densities
nakhonpathom_lixels$density <- densities
```

```{r}
# rescaling to help the mapping# rescaling to help the mapping
nakhonpathom_samples$density <- nakhonpathom_samples$density*1000
nakhonpathom_lixels$density <- nakhonpathom_lixels$density*1000
```

```{r}
# Plot using tmap
# tmap_mode('view')
# tm_shape(nakhonpathom_lixels) +
#   tm_lines(col = "density") +
# tm_shape(rdacc_nakhonpathom) +
#   tm_dots()
# tmap_mode('plot')
```

### 5.4 Network KDE (NKDE) Analysis - Pathum Thani

#### 5.4.1 Preparing the lixels objects

```{r}
# Filter for Bangkok only
BMR_network_pathumthani <- BMR_network[BMR_network$ADM1_EN == "Pathum Thani", ]

# Cast to LINESTRING geometry
BMR_network_pathumthani_linestring <- st_cast(BMR_network_pathumthani, "LINESTRING")
```

```{r}
pathumthani_lixels <- lixelize_lines(BMR_network_pathumthani_linestring, 700, mindist = 375)
```

#### 5.4.2 Generating the line centre points

```{r}
pathumthani_samples <- lines_center(pathumthani_lixels) 
```

```{r}
rdacc_pathumthani <- rdacc_bmr_sf[rdacc_bmr_sf$province_en == "Pathum Thani", ]
```

```{r}
densities <- nkde(BMR_network_pathumthani_linestring, 
                  events = rdacc_pathumthani,
                  w = rep(1, nrow(rdacc_pathumthani)),
                  samples = pathumthani_samples,
                  kernel_name = "quartic",
                  bw = 300, 
                  div= "bw", 
                  method = "simple", 
                  digits = 1, 
                  tol = 1,
                  grid_shape = c(1,1), 
                  max_depth = 8,
                  agg = 5, 
                  sparse = TRUE,
                  verbose = FALSE)

```

```{r}
pathumthani_samples$density <- densities
pathumthani_lixels$density <- densities
```

```{r}
# rescaling to help the mapping# rescaling to help the mapping
pathumthani_samples$density <- pathumthani_samples$density*1000
pathumthani_lixels$density <- pathumthani_lixels$density*1000
```

```{r}
# Plot using tmap
# tmap_mode('view')
# tm_shape(pathumthani_lixels) +
#   tm_lines(col = "density") +
# tm_shape(rdacc_pathumthani) +
#   tm_dots()
# tmap_mode('plot')
```
### 5.5 Network KDE (NKDE) Analysis - Samut Prakan

#### 5.5.1 Preparing the lixels objects

```{r}
# Filter for Bangkok only
BMR_network_samutprakan <- BMR_network[BMR_network$ADM1_EN == "Samut Prakan", ]

# Cast to LINESTRING geometry
BMR_network_samutprakan_linestring <- st_cast(BMR_network_samutprakan, "LINESTRING")
```

```{r}
samutprakan_lixels <- lixelize_lines(BMR_network_samutprakan_linestring, 700, mindist = 375)
```

#### 5.5.2 Generating the line centre points

```{r}
samutprakan_samples <- lines_center(samutprakan_lixels) 
```

```{r}
rdacc_samutprakan <- rdacc_bmr_sf[rdacc_bmr_sf$province_en == "Samut Prakan", ]
```

```{r}
densities <- nkde(BMR_network_samutprakan_linestring, 
                  events = rdacc_samutprakan,
                  w = rep(1, nrow(rdacc_samutprakan)),
                  samples = samutprakan_samples,
                  kernel_name = "quartic",
                  bw = 300, 
                  div= "bw", 
                  method = "simple", 
                  digits = 1, 
                  tol = 1,
                  grid_shape = c(1,1), 
                  max_depth = 8,
                  agg = 5, 
                  sparse = TRUE,
                  verbose = FALSE)

```

```{r}
samutprakan_samples$density <- densities
samutprakan_lixels$density <- densities
```

```{r}
# rescaling to help the mapping# rescaling to help the mapping
samutprakan_samples$density <- samutprakan_samples$density*1000
samutprakan_lixels$density <- samutprakan_lixels$density*1000
```

```{r}
# Plot using tmap
# tmap_mode('view')
# tm_shape(samutprakan_lixels) +
#   tm_lines(col = "density") +
# tm_shape(rdacc_samutprakan) +
#   tm_dots()
# tmap_mode('plot')
```
### 5.6 Network KDE (NKDE) Analysis - Samut Sakhon

#### 5.6.1 Preparing the lixels objects
```{r}
# Filter for Bangkok only
BMR_network_samutsakhon <- BMR_network[BMR_network$ADM1_EN == "Samut Sakhon", ]

# Cast to LINESTRING geometry
BMR_network_samutsakhon_linestring <- st_cast(BMR_network_samutsakhon, "LINESTRING")
```

```{r}
samutsakhon_lixels <- lixelize_lines(BMR_network_samutsakhon_linestring, 700, mindist = 375)
```

#### 5.6.2 Generating the line centre points

```{r}
samutsakhon_samples <- lines_center(samutsakhon_lixels) 
```

```{r}
rdacc_samutsakhon <- rdacc_bmr_sf[rdacc_bmr_sf$province_en == "Samut Sakhon", ]
```

```{r}


densities <- nkde(BMR_network_samutsakhon_linestring, 
                  events = rdacc_samutsakhon,
                  w = rep(1, nrow(rdacc_samutsakhon)),
                  samples = samutsakhon_samples,
                  kernel_name = "quartic",
                  bw = 300, 
                  div= "bw", 
                  method = "simple", 
                  digits = 1, 
                  tol = 1,
                  grid_shape = c(1,1), 
                  max_depth = 8,
                  agg = 5, 
                  sparse = TRUE,
                  verbose = FALSE)

```

```{r}
samutsakhon_samples$density <- densities
samutsakhon_lixels$density <- densities
```

```{r}
# rescaling to help the mapping# rescaling to help the mapping
samutsakhon_samples$density <- samutsakhon_samples$density*1000
samutsakhon_lixels$density <- samutsakhon_lixels$density*1000
```

```{r}
# Plot using tmap
# tmap_mode('view')
# tm_shape(samutsakhon_lixels) +
#   tm_lines(col = "density") +
# tm_shape(rdacc_samutsakhon) +
#   tm_dots()
# tmap_mode('plot')
```

## 6 Network Constrained G- and K-function Analysis

### 6.1 Bangkok

```{r}
set.seed(1234)
kfun_rdacc_bangkok <- kfunctions(BMR_network_bangkok_linestring, 
                             rdacc_bangkok,
                             start = 0, 
                             end = 1000, 
                             step = 50, 
                             width = 50, 
                             nsim = 50, 
                             resolution = 50,
                             verbose = FALSE, 
                             conf_int = 0.05,
                             agg = 10)
```

```{r}
kfun_rdacc_bangkok$plotk + ggtitle("Bangkok")
```
The blue line is above the dashed black line and confidence envelope for most of the plot, which suggests that road accidents in Bangkok are clustered rather than randomly distributed.


### 6.2 Nonthaburi

```{r}
kfun_rdacc_nonthaburi <- kfunctions(BMR_network_nonthaburi_linestring, 
                             rdacc_nonthaburi,
                             start = 0, 
                             end = 1000, 
                             step = 50, 
                             width = 50, 
                             nsim = 50, 
                             resolution = 50,
                             verbose = FALSE, 
                             conf_int = 0.05,
                             agg = 320)
```

```{r}
kfun_rdacc_nonthaburi$plotk+ ggtitle("Nonthaburi")
```
Unlike in Bangkok (where we saw clear clustering), road accidents in Nonthaburi resemble regular pattern at the distance of 50 to 575m.


### 6.3 Nakhon Pathom

```{r}
kfun_rdacc_nakhonpathom <- kfunctions(BMR_network_nakhonpathom_linestring, 
                             rdacc_nakhonpathom,
                             start = 0, 
                             end = 1000, 
                             step = 50, 
                             width = 50, 
                             nsim = 50, 
                             resolution = 50,
                             verbose = FALSE, 
                             conf_int = 0.05,
                             agg = 170)
```

```{r}
kfun_rdacc_nakhonpathom$plotk + ggtitle("Nakhon Pathom")
```
Road accidents in Nakhon Pathom resemble clustered pattern at the distance of 250 to 1000m.

### 6.4 Pathum Thani

```{r}
kfun_rdacc_pathumthani <- kfunctions(BMR_network_pathumthani_linestring, 
                             rdacc_pathumthani,
                             start = 0, 
                             end = 1000, 
                             step = 50, 
                             width = 50, 
                             nsim = 50, 
                             resolution = 50,
                             verbose = FALSE, 
                             conf_int = 0.05,
                             agg = 10)
```

```{r}
kfun_rdacc_pathumthani$plotk + ggtitle("Pathum Thani")
```
Road accidents in Pathum Thani resemble clustered pattern at the distance of 0 to 1000m.

### 6.5 Samut Prakan

```{r}
kfun_rdacc_samutprakan <- kfunctions(BMR_network_samutprakan_linestring, 
                             rdacc_samutprakan,
                             start = 0, 
                             end = 1000, 
                             step = 50, 
                             width = 50, 
                             nsim = 50, 
                             resolution = 50,
                             verbose = FALSE, 
                             conf_int = 0.05,
                             agg = 10)
```

```{r}
kfun_rdacc_samutprakan$plotk + ggtitle("Samut Prakan")
```
Road accidents in Samut Prakan resemble clustered pattern at the distance of 0 to 1000m.

### 6.6 Samut Sakhon

```{r}
kfun_rdacc_samutsakhon <- kfunctions(BMR_network_samutsakhon_linestring, 
                             rdacc_samutsakhon,
                             start = 0, 
                             end = 1000, 
                             step = 50, 
                             width = 50, 
                             nsim = 50, 
                             resolution = 50,
                             verbose = FALSE, 
                             conf_int = 0.05,
                             agg = 10)
```

```{r}
kfun_rdacc_samutsakhon$plotk + ggtitle("Samut Sakhon")
```
Road accidents in Samut Sakhon resemble clustered pattern at the distance of 0 to 1000m.

