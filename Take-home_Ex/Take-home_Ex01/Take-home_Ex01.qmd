---
title: "Take-home Exercise 1: Geospatial Analytics for Public Good"
author: "Ng Meng Ye"
date-modified:  "2024-09-21"
date: 2024-09-03
---

## 1 Overview

Thailandâ€™s roads are the deadliest in Southeast Asia and among the worst in the world, according to the World Health Organisation. About 20,000 people die in road accidents each year, or about 56 deaths a day (WHO).

## 2 Getting Started

### 2.1 Objectives

In view of this, we need discover factors affecting road traffic accidents in the Bangkok Metropolitan Region BMR by employing both spatial spatio-temporal point patterns analysis methods.

The specific objectives of this take-home exercise are as follows:

-   To visualize the spatio-temporal dynamics of road traffic accidents in BMR using appropriate statistical graphics and geovisualization methods.

-   To conduct detailed spatial analysis of road traffic accidents using appropriate Network Spatial Point Patterns Analysis methods.

-   To conduct detailed spatio-temporal analysis of road traffic accidents using appropriate Temporal Network Spatial Point Patterns Analysis methods.

### 2.2 The Study Area

The focus of this study would in the Bangkok Metropolitan Region BMR, which includes the provinces:

1.  Bangkok

2.  Nonthaburi

3.  Nakhon Pathom

4.  Pathum Thani

5.  Samut Prakan

6.  Samut Sakhon

## 3 Data Preparation

### 3.1 Geospatial

These data sets are in `shp` format

-   Thailand Roads, available publicly from [HDX](https://data.humdata.org/dataset/hotosm_tha_roads)
-   Thailand - Subnational Administrative Boundaries, available publicly from [HDX](https://data.humdata.org/dataset/cod-ab-tha?)

This data sets are in `csv` format

-   Thailand Road Accident \[2019-2022\], available publicly from [Kaggle](https://www.kaggle.com/datasets/thaweewatboy/thailand-road-accident-2019-2022)

```{r}
#| output: false
set.seed(1234)
pacman::p_load(sf,raster,spatstat,tmap,tidyverse,sp,maptools,spNetwork)
```

## 4 Data Wrangling

### 4.1 Thailand Road Accident 2019-2022

#### 4.1.1 Importing Attribute Data into R

We will import thai_road_accident_2019_2022.csv file into RStudio and save the file into an R dataframe called `rdacc`

```{r}
rdacc <- read_csv("C:/ngmengye/ISSS626-GAA/Take-home_Ex/Take-home_Ex01/data/aspatial/thai_road_accident_2019_2022.csv")
```

#### 4.1.2 Filtering missing values

To define the geometry of each point, we need to use the latitude and longitude coordinates. Before converting the data frame to an `sf` object, we need to ensure that there are no missing values in the latitude and longitude columns.

Since only 359 out of 81,735 rows have missing values, it is reasonable to remove them.

```{r}
lat_na <- sum(is.na(rdacc$latitude))
long_na <- sum(is.na(rdacc$longitude))

total_rows <- nrow(rdacc)

lat_na_pct <- (lat_na / total_rows) * 100
long_na_pct <- (long_na / total_rows) * 100

cat("Missing values in Latitude:", lat_na, "(", round(lat_na_pct, 2), "% )\n")
cat("Missing values in Longitude:", long_na, "(", round(long_na_pct, 2), "% )\n")

```

#### 4.1.3 Creating a simple feature data frame from an aspatial data frame

The code chunk below converts `rdacc` data frame into a simple feature data frame by using `st_as_st()` of **sf** packages

```{r}
rdacc_sf <- rdacc %>% 
  filter(!is.na(longitude) & longitude != "",
         !is.na(latitude)& latitude != "") %>% 
  st_as_sf(coords = c(
    "longitude", "latitude"),
    crs = 4326) %>% 
  st_transform(crs = 32647)
```

The code chunk below shows that there are 81376 observations in `rdacc_sf`

```{r}
nrow(rdacc_sf)
```

To reduce the computational load and improve code execution speed, we should filter the `rdacc_sf` data to include only cases where the weather condition is clear and the accident type is rear-end collision.

A high frequency of rear-end collisions under clear conditions may indicate potential issues with road design, traffic signal timing, or congestion, rather than being caused by weather-related factors.

```{r}
rdacc_sf_2 <- rdacc_sf[rdacc_sf$weather_condition == "clear" & rdacc_sf$accident_type == "rear-end collision", ]
```

::: callout-caution
### 4.2 Correcting the projection

`EPSG: 4326` is wgs84 Geographic Coordinate System and `EPSG: 32647` refers to the WGS 84 / UTM zone 47N Projected Coordinate System, which is specifically used for areas in Thailand.
:::

#### 4.2.1 Plotting the Aspatial Data

We use `st_geometry` to display basic information of the feature class such as type of geometry. It looks like the plot is showing points scattered across a wide area, which suggests that your data includes locations outside the Bangkok Metropolitan Region (BMR).

```{r}
plot(st_geometry(rdacc_sf_2))
```

To focus only on data within the BMR, we need to filter the dataset for coordinates that fall within the region.

```{r}
rdacc_bmr_sf <- rdacc_sf_2 %>%
  filter(province_en %in% c("Bangkok", "Nonthaburi", "Nakhon Pathom", "Pathum Thani", "Samut Prakan", "Samut Sakhon"))
```

Our plot now shows road accident points within the Bangkok Metropolitan Region (BMR) overlaid on the road network. This looks much better than the previous scattered points across a broader region.

```{r}
plot(st_geometry(rdacc_bmr_sf))
```

### 4.3 Thailand Roads

#### 4.3.1 Importing Geospatial Data

We will import `hotosm_tha_roads_lines` shapefile into RStudio as sf data frames.

```{r}
network <- st_read(dsn="C:/ngmengye/ISSS626-GAA/Take-home_Ex/Take-home_Ex01/data/geospatial", 
                   layer="hotosm_tha_roads_lines_shp")
```

The Coordinate Reference System, CRS is showing NA. Without a CRS, it's unclear how the coordinates relate to the earth, which can lead to errors when performing spatial analysis.

Set the CRS of `network` to WGS 84 (EPSG: 4326).

```{r}
network <- st_set_crs(network, 4326)
```

Transform the CRS of `network` to UTM Zone 47N (EPSG: 32647).

```{r}
network32647 <- st_transform(network,32647)
```

```{r}
st_geometry(network32647)
```

The code chunk above indicates `network32647` with CRS: WGS 84 / UTM zone 47N.

There are 2792590 observations, let's check what the highway types available in the `network32647`.

```{r}
unique_values <- unique(network32647$highway)

print(unique_values)
```

According to [Highway classification on WikiProject Thailand](https://wiki.openstreetmap.org/wiki/WikiProject_Thailand#Highway_classification), we should only include intercity roads:

1 secondary\
2 tertiary\
3 trunk\
4 primary\
5 motorway\
6 unclassified\

Filter `network32647` data accordingly into a new dataset `filtered_network`

```{r}
highway_types <- c(
"secondary", "tertiary","trunk", "primary", "motorway", "unclassified"
)

filtered_network <- network32647 %>%
  filter(highway %in% highway_types)
```

The `filtered_network` now has 203029 observations.

```{r}
nrow(filtered_network)
```

### 4.4 Thailand - Subnational Administrative Boundaries

#### 4.4.1 Importing Geospatial Data

Thailand administrative level 0 (country), 1 (province), 2 (district), and 3 (sub-district, tambon) boundaries. Since we focus on Bangkok Metropolitan Region, we should import level 1 (province) data. We will import `tha_admbnda_adm1_rtsd_20220121` shapefile into RStudio as sf data frames.

```{r}
thai_map <- st_read(dsn="C:/ngmengye/ISSS626-GAA/Take-home_Ex/Take-home_Ex01/data/geospatial", 
                   layer="tha_admbnda_adm1_rtsd_20220121")
```

Transform CRS of `thai_map` to UTM Zone 47N (EPSG: 32647) as dataset `thai_map_32647`.

```{r}
thai_map_32647 <- st_transform(thai_map, crs = 32647)
```

`thai_map_32647` shows projected CRS: WGS 84 / UTM zone 47N, same as `filtered_network`.

```{r}
st_geometry(thai_map_32647)
```

The `thai_map_32647` dataset covers the entire Thailand region.

For this study, we are specifically focusing on the Bangkok Metropolitan Region (BMR). Accordingly, we will filter the dataset to include only the BMR area."

```{r}
thaiBMR <- thai_map_32647 %>%
  filter(ADM1_EN %in% c("Bangkok", "Nonthaburi", "Nakhon Pathom", "Pathum Thani", "Samut Prakan", "Samut Sakhon"))
```

`ThaiBMR` dataset only consists of the 6 provinces in BMR.

```{r}
thaiBMR
```

#### 4.4.2 Visualizing the Geospatial Data

We will visual the distribution of road accidents in BMR below using the datasets `thaiBMR` and `rdacc_bmr_sf`.

```{r}
plot(st_geometry(thaiBMR), col = "lightblue", main = "BMR with Road Accidents")

plot(rdacc_bmr_sf$geometry, col = "red", pch = 19, add = TRUE)

```

The `filtered_network` dataset covers all Thailand region. We can use `st_intersection()` function to find the geometric intersection of `thaiBMR`. The new dataset will be `BMR_network` that only consists BMR networks.

```{r}
BMR_network <- st_intersection(filtered_network,thaiBMR)
```

The `BMR_network` consists of 26725 observations.

```{r}
st_geometry(BMR_network)
```

We visualize the distribution of the road accidents within the network in BMR using `BMR_network`, `thaiBMR` and `rdacc_bmr_sf`.

```{r}
plot(st_geometry(thaiBMR), col = "lightblue", main = "BMR with Highways")
plot(st_geometry(BMR_network), col = "black", add = TRUE)

plot(rdacc_bmr_sf, add = TRUE, col = 'red', pch = 19, cex = 0.5)  # cex = 0.5 makes the dots smaller

```

This map of the Bangkok Metropolitan Region (BMR) shows the distribution of `rear-end collisions` that occurred under `clear weather conditions`. The highlighted road network includes highways classified as secondary, tertiary, trunk, primary, motorway, and unclassified types.

## 5 Network Constrained Spatial Point Patterns Analysis

### 5.1 Bangkok NKDE Analysis

Preparing the lixels objects

```{r}
#| warning: false
BMR_network_bangkok <- BMR_network[BMR_network$ADM1_EN == "Bangkok", ]

BMR_network_bangkok_linestring <- st_cast(BMR_network_bangkok, "LINESTRING")
```

```{r}
bangkok_lixels <- lixelize_lines(BMR_network_bangkok_linestring, 700, mindist = 375)
```

Generating the line centre points

```{r}
bangkok_samples <- lines_center(bangkok_lixels) 
```

```{r}
rdacc_bangkok <- rdacc_bmr_sf[rdacc_bmr_sf$province_en == "Bangkok", ]
```

We use `simple` method with big datasets.

```{r}
densities <- nkde(BMR_network_bangkok_linestring, 
                  events = rdacc_bangkok,
                  w = rep(1, nrow(rdacc_bangkok)),
                  samples = bangkok_samples,
                  kernel_name = "quartic",
                  bw = 300, 
                  div= "bw", 
                  method = "simple", 
                  digits = 1, 
                  tol = 1,
                  grid_shape = c(1,1), 
                  max_depth = 8,
                  agg = 5, 
                  sparse = TRUE,
                  verbose = FALSE)

```

```{r}
bangkok_samples$density <- densities
bangkok_lixels$density <- densities
```

```{r}
# rescaling to help the mapping# rescaling to help the mapping
bangkok_samples$density <- bangkok_samples$density*1000
bangkok_lixels$density <- bangkok_lixels$density*1000
```

```{r}
plot(st_geometry(bangkok_lixels), col = bangkok_lixels$density, main = "BMR Network with Density")
col_range <- colorRampPalette(c("lightblue", "red"))(100) 
plot(st_geometry(bangkok_lixels), col = col_range[cut(bangkok_lixels$density, breaks = 100)], main = "Bangkok NKDE Visualization")
```

### 5.2 Nonthaburi NKDE Analysis

Preparing the lixels objects

```{r}
BMR_network_nonthaburi <- BMR_network[BMR_network$ADM1_EN == "Nonthaburi", ]
BMR_network_nonthaburi_linestring <- st_cast(BMR_network_nonthaburi, "LINESTRING")
```

```{r}
nonthaburi_lixels <- lixelize_lines(BMR_network_nonthaburi_linestring, 700, mindist = 375)
```

Generating the line centre points

```{r}
nonthaburi_samples <- lines_center(nonthaburi_lixels) 
```

```{r}
rdacc_nonthaburi <- rdacc_bmr_sf[rdacc_bmr_sf$province_en == "Nonthaburi", ]
```

```{r}
densities <- nkde(BMR_network_nonthaburi_linestring, 
                  events = rdacc_nonthaburi,
                  w = rep(1, nrow(rdacc_nonthaburi)),
                  samples = nonthaburi_samples,
                  kernel_name = "quartic",
                  bw = 300, 
                  div= "bw", 
                  method = "simple", 
                  digits = 1, 
                  tol = 1,
                  grid_shape = c(1,1), 
                  max_depth = 8,
                  agg = 5, 
                  sparse = TRUE,
                  verbose = FALSE)

```

```{r}
nonthaburi_samples$density <- densities
nonthaburi_lixels$density <- densities
```

```{r}
# rescaling to help the mapping# rescaling to help the mapping
nonthaburi_samples$density <- nonthaburi_samples$density*1000
nonthaburi_lixels$density <- nonthaburi_lixels$density*1000
```

```{r}
#| warning: false
plot(st_geometry(nonthaburi_lixels), col = nonthaburi_lixels, main = "Nonthaburi NKDE Visualization")
col_range <- colorRampPalette(c("lightblue", "red"))(100) 
plot(st_geometry(nonthaburi_lixels), col = col_range[cut(nonthaburi_lixels$density, breaks = 100)], main = "Nonthaburi NKDE Visualization")
```

### 5.3 Nakhon Pathom NKDE Analysis

Preparing the lixels objects

```{r}
#| warning: false
BMR_network_nakhonpathom <- BMR_network[BMR_network$ADM1_EN == "Nakhon Pathom", ]
BMR_network_nakhonpathom_linestring <- st_cast(BMR_network_nakhonpathom, "LINESTRING")
```

```{r}
nakhonpathom_lixels <- lixelize_lines(BMR_network_nakhonpathom_linestring, 700, mindist = 375)
```

Generating the line centre points

```{r}
nakhonpathom_samples <- lines_center(nakhonpathom_lixels) 
```

```{r}
rdacc_nakhonpathom <- rdacc_bmr_sf[rdacc_bmr_sf$province_en == "Nakhon Pathom", ]
```

```{r}
densities <- nkde(BMR_network_nakhonpathom_linestring, 
                  events = rdacc_nakhonpathom,
                  w = rep(1, nrow(rdacc_nakhonpathom)),
                  samples = nakhonpathom_samples,
                  kernel_name = "quartic",
                  bw = 300, 
                  div= "bw", 
                  method = "simple", 
                  digits = 1, 
                  tol = 1,
                  grid_shape = c(1,1), 
                  max_depth = 8,
                  agg = 5, 
                  sparse = TRUE,
                  verbose = FALSE)

```

```{r}
nakhonpathom_samples$density <- densities
nakhonpathom_lixels$density <- densities
```

```{r}
# rescaling to help the mapping# rescaling to help the mapping
nakhonpathom_samples$density <- nakhonpathom_samples$density*1000
nakhonpathom_lixels$density <- nakhonpathom_lixels$density*1000
```

```{r}
#| warning: false
plot(st_geometry(nakhonpathom_lixels), col = nakhonpathom_lixels, main = "Nakhon Pathom NKDE Visualization")
col_range <- colorRampPalette(c("lightblue", "red"))(100) 
plot(st_geometry(nakhonpathom_lixels), col = col_range[cut(nakhonpathom_lixels$density, breaks = 100)], main = "Nakhon Pathom NKDE Visualization")
```

### 5.4 Pathum Thani NKDE Analysis

Preparing the lixels objects

```{r}
BMR_network_pathumthani <- BMR_network[BMR_network$ADM1_EN == "Pathum Thani", ]
BMR_network_pathumthani_linestring <- st_cast(BMR_network_pathumthani, "LINESTRING")
```

```{r}
pathumthani_lixels <- lixelize_lines(BMR_network_pathumthani_linestring, 700, mindist = 375)
```

Generating the line centre points

```{r}
pathumthani_samples <- lines_center(pathumthani_lixels) 
```

```{r}
rdacc_pathumthani <- rdacc_bmr_sf[rdacc_bmr_sf$province_en == "Pathum Thani", ]
```

```{r}
densities <- nkde(BMR_network_pathumthani_linestring, 
                  events = rdacc_pathumthani,
                  w = rep(1, nrow(rdacc_pathumthani)),
                  samples = pathumthani_samples,
                  kernel_name = "quartic",
                  bw = 300, 
                  div= "bw", 
                  method = "simple", 
                  digits = 1, 
                  tol = 1,
                  grid_shape = c(1,1), 
                  max_depth = 8,
                  agg = 5, 
                  sparse = TRUE,
                  verbose = FALSE)

```

```{r}
pathumthani_samples$density <- densities
pathumthani_lixels$density <- densities
```

```{r}
# rescaling to help the mapping# rescaling to help the mapping
pathumthani_samples$density <- pathumthani_samples$density*1000
pathumthani_lixels$density <- pathumthani_lixels$density*1000
```

```{r}
#| warning: false
plot(st_geometry(pathumthani_lixels), col = pathumthani_lixels, main = "Pathum Thani NKDE Visualization")
col_range <- colorRampPalette(c("lightblue", "red"))(100) 
plot(st_geometry(pathumthani_lixels), col = col_range[cut(pathumthani_lixels$density, breaks = 100)], main = "Pathum Thani NKDE Visualization")
```

### 5.5 Samut Prakan NKDE Analysis

Preparing the lixels objects

```{r}
BMR_network_samutprakan <- BMR_network[BMR_network$ADM1_EN == "Samut Prakan", ]
BMR_network_samutprakan_linestring <- st_cast(BMR_network_samutprakan, "LINESTRING")
```

```{r}
samutprakan_lixels <- lixelize_lines(BMR_network_samutprakan_linestring, 700, mindist = 375)
```

Generating the line centre points

```{r}
samutprakan_samples <- lines_center(samutprakan_lixels) 
```

```{r}
rdacc_samutprakan <- rdacc_bmr_sf[rdacc_bmr_sf$province_en == "Samut Prakan", ]
```

```{r}
densities <- nkde(BMR_network_samutprakan_linestring, 
                  events = rdacc_samutprakan,
                  w = rep(1, nrow(rdacc_samutprakan)),
                  samples = samutprakan_samples,
                  kernel_name = "quartic",
                  bw = 300, 
                  div= "bw", 
                  method = "simple", 
                  digits = 1, 
                  tol = 1,
                  grid_shape = c(1,1), 
                  max_depth = 8,
                  agg = 5, 
                  sparse = TRUE,
                  verbose = FALSE)

```

```{r}
samutprakan_samples$density <- densities
samutprakan_lixels$density <- densities
```

```{r}
# rescaling to help the mapping# rescaling to help the mapping
samutprakan_samples$density <- samutprakan_samples$density*1000
samutprakan_lixels$density <- samutprakan_lixels$density*1000
```

```{r}
#| warning: false
plot(st_geometry(samutprakan_lixels), col = samutprakan_lixels, main = "Samut Prakan NKDE Visualization")
col_range <- colorRampPalette(c("lightblue", "red"))(100) 
plot(st_geometry(samutprakan_lixels), col = col_range[cut(samutprakan_lixels$density, breaks = 100)], main = "Samut Prakan NKDE Visualization")
```

### 5.6 Samut Sakhon NKDE Analysis

Preparing the lixels objects

```{r}
#| warning: false
BMR_network_samutsakhon <- BMR_network[BMR_network$ADM1_EN == "Samut Sakhon", ]
BMR_network_samutsakhon_linestring <- st_cast(BMR_network_samutsakhon, "LINESTRING")
```

```{r}
samutsakhon_lixels <- lixelize_lines(BMR_network_samutsakhon_linestring, 700, mindist = 375)
```

Generating the line centre points

```{r}
samutsakhon_samples <- lines_center(samutsakhon_lixels) 
```

```{r}
rdacc_samutsakhon <- rdacc_bmr_sf[rdacc_bmr_sf$province_en == "Samut Sakhon", ]
```

```{r}
densities <- nkde(BMR_network_samutsakhon_linestring, 
                  events = rdacc_samutsakhon,
                  w = rep(1, nrow(rdacc_samutsakhon)),
                  samples = samutsakhon_samples,
                  kernel_name = "quartic",
                  bw = 300, 
                  div= "bw", 
                  method = "simple", 
                  digits = 1, 
                  tol = 1,
                  grid_shape = c(1,1), 
                  max_depth = 8,
                  agg = 5, 
                  sparse = TRUE,
                  verbose = FALSE)

```

```{r}
samutsakhon_samples$density <- densities
samutsakhon_lixels$density <- densities
```

```{r}
# rescaling to help the mapping# rescaling to help the mapping
samutsakhon_samples$density <- samutsakhon_samples$density*1000
samutsakhon_lixels$density <- samutsakhon_lixels$density*1000
```

```{r}
#| warning: false
plot(st_geometry(samutsakhon_lixels), col = samutsakhon_lixels, main = "Samut Sakhon NKDE Visualization")
col_range <- colorRampPalette(c("lightblue", "red"))(100) 
plot(st_geometry(samutsakhon_lixels), col = col_range[cut(samutsakhon_lixels$density, breaks = 100)], main = "Samut Sakhon NKDE Visualization")
```

## 6 Network Constrained G- and K-function Analysis

### 6.1 Bangkok

```{r}
#| warning: false
kfun_rdacc_bangkok <- kfunctions(BMR_network_bangkok_linestring, 
                             rdacc_bangkok,
                             start = 0, 
                             end = 1000, 
                             step = 50, 
                             width = 50, 
                             nsim = 50, 
                             resolution = 50,
                             verbose = FALSE, 
                             conf_int = 0.05,
                             agg = 10)
```

```{r}
kfun_rdacc_bangkok$plotk + ggtitle("Bangkok")
```

The blue line is above the dashed black line and confidence envelope for most of the plot, which suggests that road accidents in Bangkok are clustered rather than randomly distributed.

### 6.2 Nonthaburi

```{r}
kfun_rdacc_nonthaburi <- kfunctions(BMR_network_nonthaburi_linestring, 
                             rdacc_nonthaburi,
                             start = 0, 
                             end = 1000, 
                             step = 50, 
                             width = 50, 
                             nsim = 50, 
                             resolution = 50,
                             verbose = FALSE, 
                             conf_int = 0.05,
                             agg = 320)
```

```{r}
kfun_rdacc_nonthaburi$plotk+ ggtitle("Nonthaburi")
```

Unlike in Bangkok (where we saw clear clustering), road accidents in Nonthaburi resemble regular pattern at the distance of 50 to 575m.

### 6.3 Nakhon Pathom

```{r}
kfun_rdacc_nakhonpathom <- kfunctions(BMR_network_nakhonpathom_linestring, 
                             rdacc_nakhonpathom,
                             start = 0, 
                             end = 1000, 
                             step = 50, 
                             width = 50, 
                             nsim = 50, 
                             resolution = 50,
                             verbose = FALSE, 
                             conf_int = 0.05,
                             agg = 170)
```

```{r}
kfun_rdacc_nakhonpathom$plotk + ggtitle("Nakhon Pathom")
```

Road accidents in Nakhon Pathom resemble clustered pattern at the distance of 250 to 1000m.

### 6.4 Pathum Thani

```{r}
kfun_rdacc_pathumthani <- kfunctions(BMR_network_pathumthani_linestring, 
                             rdacc_pathumthani,
                             start = 0, 
                             end = 1000, 
                             step = 50, 
                             width = 50, 
                             nsim = 50, 
                             resolution = 50,
                             verbose = FALSE, 
                             conf_int = 0.05,
                             agg = 10)
```

```{r}
kfun_rdacc_pathumthani$plotk + ggtitle("Pathum Thani")
```

Road accidents in Pathum Thani resemble clustered pattern at the distance of 0 to 1000m.

### 6.5 Samut Prakan

```{r}
kfun_rdacc_samutprakan <- kfunctions(BMR_network_samutprakan_linestring, 
                             rdacc_samutprakan,
                             start = 0, 
                             end = 1000, 
                             step = 50, 
                             width = 50, 
                             nsim = 50, 
                             resolution = 50,
                             verbose = FALSE, 
                             conf_int = 0.05,
                             agg = 10)
```

```{r}
kfun_rdacc_samutprakan$plotk + ggtitle("Samut Prakan")
```

Road accidents in Samut Prakan resemble clustered pattern at the distance of 0 to 1000m.

### 6.6 Samut Sakhon

```{r}
kfun_rdacc_samutsakhon <- kfunctions(BMR_network_samutsakhon_linestring, 
                             rdacc_samutsakhon,
                             start = 0, 
                             end = 1000, 
                             step = 50, 
                             width = 50, 
                             nsim = 50, 
                             resolution = 50,
                             verbose = FALSE, 
                             conf_int = 0.05,
                             agg = 10)
```

```{r}
kfun_rdacc_samutsakhon$plotk + ggtitle("Samut Sakhon")
```

Road accidents in Samut Sakhon resemble clustered pattern at the distance of 0 to 1000m.
